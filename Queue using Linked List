class Node:
    def __init__(self, Newdata, link=None):
        self.data = Newdata
        self.next = link

class Queue:
    def __init__(self):
        self.front = None
        self.rear = None

    def is_empty(self):
        return self.front is None

    def enqueue(self, Newdata):
        newNode = Node(Newdata, None)
        if self.front is None:
            self.front = self.rear = newNode
        else:
            self.rear.next = newNode
            self.rear = newNode

    def peek(self):
        return self.front.data

    def dequeue(self):
        frontNode = self.front
        if self.front == self.rear:
            self.front = self.rear = None
        else:
            self.front = frontNode.next
        return frontNode.data

    def display(self):
        curNode = self.front
        print()
        while curNode is not None:
            print(curNode.data)
            curNode = curNode.next
        print("None")

q = Queue()

while True:
    print("\nProgram to implement queue")
    print("1. Enqueue")
    print("2. Dequeue")
    print("3. Peek")
    print("4. Display")
    print("5. Exit")

    choice = int(input("Enter the choice: "))

    if choice == 1:
        num = int(input("Enter the number to enqueue: "))
        q.enqueue(num)
    elif choice == 2:
        if q.is_empty():
            print("Queue is underflow!")
        else:
            num = q.dequeue()
            print("Item dequeued:", num)
    elif choice == 3:
        if q.is_empty():
            print("Queue is underflow!")
        else:
            num = q.peek()
            print("Item at the front of the queue:", num)
    elif choice == 4:
        if q.is_empty():
            print("Queue is empty")
        else:
            q.display()
    elif choice == 5:
        print("\nQuitting...")
        break
    else:
        print("Invalid choice")
